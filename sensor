#include <IOXhop_FirebaseESP32.h>
#include <PPD42NS.h>
#include <GP2YDustSensor.h>
#include <PMsensor.h>
#include <WiFi.h>
#include <HTTPClient.h>   //Including HTTPClient.h library to use all api


#define FIREBASE_HOST "https://pengukuran-partikulat-default-rtdb.asia-southeast1.firebasedatabase.app/"
#define FIREBASE_AUTH "Sk7g7vjeLxm8hPSU4OUIeyzNK0qU5DsmrHSLUB6l"

const char* ssid="iphone";
const char* password="11111111";

String apiKey = "5468016";              //Add your Token number that bot has sent you on WhatsApp messenger
String phone_number = "6289613028941"; //Add your WhatsApp app registered phone number (same number that bot send you in url)
String url;    
#define SENSOR_PIN 32
#define LED_PIN 18
PPD42NS sensor;

const uint8_t SHARP_LED_PIN = 14;   //14 Sharp Dust/particle sensor Led Pin
const uint8_t SHARP_VO_PIN = 15;    //15 Sharp Dust/particle analog out pin used for reading 
PMsensor PM;
GP2YDustSensor dustSensor(GP2YDustSensorType::GP2Y1010AU0F, SHARP_LED_PIN, SHARP_VO_PIN);
 //inisialisasi led ispu
 int ledk ;
 int ledm =21;
 int ledh =13;
 int ledp ;
 //inisialisasi led epa 
 int ledk1 ;
 int ledm1 ;
 int ledh1 ;
 int ledp1 ;
 //inisialisasi variabel ispu
 int Ia ;
 int Ib ;
 int Xa ;
 int Xb ;
 int ispu10 ;
 int ispu25 ;
 int Ia1 ;
 int Ib1 ;
 int Xa1 ;
 int Xb1 ;
 //inisialisasi variabel EPA
 int Iaa ;
 int Iba ;
 int Xaa ;
 int Xba;
 int Iab;
 int Ibb ;
 int Xab ;
 int Xbb ;
 int EPA10 ;
 int EPA25 ;
 int ispu ;
 int EPA ;
int TSP ; 
int ratio ;
int ispuTSP;
int EPATSP ;
void setup() {
  Serial.begin(115200);

  dustSensor.begin();
  sensor.init(SENSOR_PIN, LED_PIN);
  PM.init(25, 26); //rx 25 tx 26
  
  while(!Serial){delay(100);}
    // We start by connecting to a WiFi network

  Serial.println();
  Serial.println("******************************************************");
  Serial.print("Connecting to ");
  Serial.println(ssid);

  WiFi.begin(ssid, password);

  while (WiFi.status() != WL_CONNECTED) {
  delay(500);
  Serial.print(".");
  }

  Serial.println("");
  Serial.println("WiFi connected");
  Serial.println("IP address: ");
  Serial.println(WiFi.localIP());

  Firebase.begin(FIREBASE_HOST, FIREBASE_AUTH);
}
    

void loop() {

  float ratio = sensor.getRatio();
  float concentration = sensor.getConcentration();
  float filter_Data = PM.read(0.1);
  float noFilter_Data = PM.read();
  TSP=random(100,150);
  ratio=random(40,50);
  filter_Data=random(10,15);
  Serial.print(" TSP: ");
  Serial.print(TSP);
  Serial.println(" ug/m3 ");
  
  Serial.print(" PM 10: ");
  Serial.println(ratio);
  Serial.print(" PM 2.5: ");
  Serial.println(filter_Data);

  if (filter_Data>=0 && filter_Data <= 15,5){
      Ib=0 ;
      Ia=15.5 ;
      Xb=0 ;
      Xa=50 ;
    }
  if (filter_Data>=15.6 && filter_Data <= 55.4){
      Ib=15.6 ;
      Ia=55.4 ;
      Xb=51 ;
      Xa=100 ;
    }
  if (filter_Data>=55.5 && filter_Data <= 150.4){
      Ib=55.5 ;
      Ia=150.4 ;
      Xb=101 ;
      Xa=200 ;
    }
  if (filter_Data>=150.5 && filter_Data <= 250.4){
      Ib=150.5 ;
      Ia=250.4 ;
      Xb=201 ;
      Xa=300 ;
    }
  if (filter_Data>=250.5 && filter_Data <= 500){
      Ib=250.5 ;
      Ia=500 ;
      Xb=300 ;
      Xa=1000 ;
    }

  //EPA2.5
  if (filter_Data>=0.0 && filter_Data <=12.0 ){
      Iba=0.0 ;
      Iaa=12.0 ;
      Xba=0 ;
      Xaa=50 ;
    }
  if (filter_Data>=12.1 && filter_Data <=55.4 ){
      Iba=12.1 ;
      Iaa=55.4 ;
      Xba=51 ;
      Xaa=100 ;
    }  
  if (filter_Data>=55.4 && filter_Data <=150.4 ){
      Iba=55.5 ;
      Iaa=150.4 ;
      Xba=101 ;
      Xaa=200 ;
    }  
  if (filter_Data>=150.5 && filter_Data <=250.4 ){
      Iba=150.5 ;
      Iaa=250.4 ;
      Xba=201 ;
      Xaa=300 ;
    } 
  if (filter_Data>=250.5 && filter_Data <=350.5 ){
      Iba=250.5 ;
      Iaa=350.5 ;
      Xba=301 ;
      Xaa=400 ;
  }   
  if (filter_Data>=350.5 && filter_Data <=500.4 ){
      Iba=350.5 ;
      Iaa=500.4 ;
      Xba=401 ;
      Xaa=500 ;
    } 
  //EPA 10
  if (ratio>=0 && ratio <=54 ){
      Ibb= 0;
      Iab= 54;
      Xbb= 0;
      Xab= 50;
    }   
  if (ratio>=55 && ratio <=254 ){
      Ibb= 55;
      Iab= 254;
      Xbb= 51;
      Xab= 150;
    }  
  if (ratio>=255 && ratio <=354 ){
      Ibb= 255;
      Iab= 354;
      Xbb= 151;
      Xab= 200;
    }  
  if (ratio>=355 && ratio <=424 ){
      Ibb= 355;
      Iab= 424;
      Xbb= 201;
      Xab= 300;
    } 
   if (ratio>=425 && ratio <=504 ){
      Ibb= 425;
      Iab= 504;
      Xbb= 301;
      Xab= 400;
    }        
   if (ratio>=505 && ratio <=604 ){
      Ibb= 505;
      Iab= 604;
      Xbb= 401;
      Xab= 500;
    }                         
  //PM2.5 ISPU
  if (filter_Data>=0 && filter_Data <= 15,5){
      Ib1=0 ;
      Ia1=15.5 ;
      Xb1=0 ;
      Xa1=50 ;
    }
  if (filter_Data>=15.6 && filter_Data <= 55.4){
      Ib=15.6 ;
      Ia=55.4 ;
      Xb=51 ;
      Xa=100 ;
    }
  if (filter_Data>=55.5 && filter_Data <= 150.4){
      Ib=55.5 ;
      Ia=150.4 ;
      Xb=101 ;
      Xa=200 ;
    }
  if (filter_Data>=150.5 && filter_Data <= 250.4){
      Ib=150.5 ;
      Ia=250.4 ;
      Xb=201 ;
      Xa=300 ;
    }
  if (filter_Data>=250.5 && filter_Data <= 500){
      Ib=250.5 ;
      Ia=500 ;
      Xb=300 ;
      Xa=1000 ;
    }
  //PM 10 ISPU

    if (ratio>=50 && ratio <= 150){
      Ib1=50 ;
      Ia1=150 ;
      Xb1=0 ;
      Xa1=50 ;
    }
  if (ratio>=151 && ratio <= 350){
      Ib1=151;
      Ia1=350 ;
      Xb1=51 ;
      Xa1=100 ;
    }
  if (ratio>=351 && ratio <= 420){
      Ib1=351 ;
      Ia1=420 ;
      Xb1=101 ;
      Xa1=200 ;
    }
  if (ratio>=421 && ratio <= 500){
      Ib1=421 ;
      Ia1=500 ;
      Xb1=201 ;
      Xa1=300 ;
    }
  if (ratio>=500 && ratio <= 1000){
      Ib1=501 ;
      Ia1=1000 ;
      Xb1=300 ;
      Xa1=1000 ;
    }

  ispu25=((Ia-Ib)/(Xa-Xb))*(filter_Data-Xb)+Ib;
  ispu10=((Ia1-Ib1)/(Xa1-Xb1))*(ratio-Xb1)+Ib1;
  EPA25=((Iaa-Iba)/(Xaa-Xba))*(filter_Data-Xba)+Iba;
  EPA10=((Iab-Ibb)/(Xab-Xbb))*(ratio-Xbb)+Ibb;
  
  if (ispu25>ispu10) {
     ispu=ispu25;
    
  }
  else {
     (ispu=ispu10);
     
  }
  

  //Serial.print(" ISPU PM 2.5 : ");
  //Serial.println(ispu25);
  //Serial.print(" ISPU PM 10 : ");
  //Serial.println(ispu10);
  //Serial.print(" EPA PM 2.5 : ");
  //Serial.println(EPA25);
  //Serial.print(" EPA PM 10 : ");
  //Serial.println(EPA10);
  
  if (ispu <= 50 ) {
    Serial.println(" Kategori ISPU  = BAIK ");
  }
    if (ispu >= 51 && ispu <=100 ) {
    Serial.println(" Kategori ISPU  = SEDANG ");
  }
  if (ispu >= 101 && ispu <=200 ) {
    Serial.println(" Kategori ISPU  = TIDAK SEHAT ");
  }
  if (ispu >= 201 && ispu <=300  ) {
    Serial.println(" Kategori ISPU  = SANGAT TIDAK SEHAT ");
  }
  if (ispu >= 301 && ispu <=1000 ) {
    Serial.println(" Kategori ISPU  = BERBAHAYA ");
  }
  if (EPA >= 0 && EPA <=50 ) {
    Serial.println(" Kategori EPA  = BAIK ");
  }
  if (EPA >= 51 && EPA <=150 ) {
    Serial.println(" Kategori EPA  = SEDANG ");
  }      
  if (EPA >= 151 && EPA <=200 || ispuTSP==101 ) {
    Serial.println(" Kategori EPA  = TIDAK SEHAT ");
  }    
  if (EPA >= 201 && EPA <=300 ) {
    Serial.println(" Kategori EPA  = SANGAT TIDAK SEHAT ");
  }
  if (EPA >= 301 && EPA <=1000 ) {
    Serial.println(" Kategori EPA  = BERBAHAYA "); 
  }  
  if (ispu >= 101 || EPA>=151){
  message_to_whatsapp("KUALITAS UDARA TIDAK SEHAT, GUNAKAN GAS MASK !!!");
  }
  Serial.println("____________________________");

  // set value
  Firebase.setFloat("pm1", filter_Data);
  // handle error
  if (Firebase.failed()) {
      Serial.print("setting /number failed:");
      Serial.println(Firebase.error());  
      return;
  }
  delay(1000);
}

void  message_to_whatsapp(String message)       // user define function to send meassage to WhatsApp app
{
  //adding all number, your api key, your message into one complete url
  url = "https://api.callmebot.com/whatsapp.php?phone=" + phone_number + "&apikey=" + apiKey + "&text=" + urlencode(message);

  postData(); // calling postData to run the above-generated url once so that you will receive a message.
}

void postData()     //userDefine function used to call api(POST data)
{
  int httpCode;     // variable used to get the responce http code after calling api
  HTTPClient http;  // Declare object of class HTTPClient
  http.begin(url);  // begin the HTTPClient object with generated url
  httpCode = http.POST(url); // Finaly Post the URL with this function and it will store the http code
  if (httpCode == 200)      // Check if the responce http code is 200
  {
    Serial.println("Sent ok."); // print message sent ok message
  }
  else                      // if response HTTP code is not 200 it means there is some error.
  {
    Serial.println("Error."); // print error message.
  }
  http.end();          // After calling API end the HTTP client object.
}

String urlencode(String str)  // Function used for encoding the url
{
    String encodedString="";
    char c;
    char code0;
    char code1;
    char code2;
    for (int i =0; i < str.length(); i++){
      c=str.charAt(i);
      if (c == ' '){
        encodedString+= '+';
      } else if (isalnum(c)){
        encodedString+=c;
      } else{
        code1=(c & 0xf)+'0';
        if ((c & 0xf) >9){
            code1=(c & 0xf) - 10 + 'A';
        }
        c=(c>>4)&0xf;
        code0=c+'0';
        if (c > 9){
            code0=c - 10 + 'A';
        }
        code2='\0';
        encodedString+='%';
        encodedString+=code0;
        encodedString+=code1;
        //encodedString+=code2;
      }
      yield();
    }
    return encodedString;
}


